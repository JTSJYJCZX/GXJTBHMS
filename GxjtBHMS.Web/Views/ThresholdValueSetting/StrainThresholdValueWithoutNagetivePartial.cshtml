@model GxjtBHMS.Web.ViewModels.ThresholdValueSetting.ThresholdValueView
 
<tr class="text-center">
    <td>
        <span class="text-center form-control">@Model.PointsNumber</span>
    </td>
    <td>
        @Html.TextBoxFor(m => m.PositiveFirstLevelThresholdValue, new { @class = "text-center form-control" })
    </td>
    <td>
        @Html.TextBoxFor(m => m.PositiveSecondLevelThresholdValue, new { @class = "text-center form-control" })
    </td>
    <td>
        @Html.TextBoxFor(m => m.NegativeFirstLevelThresholdValue, new { @id = "NegativeFirst", @class = "text-center form-control", @disabled = "disabled" })
    </td>
    <td>
        @Html.TextBoxFor(m => m.NegativeSecondLevelThresholdValue, new { @id = "NegativeSecond", @class = "text-center form-control", @disabled = "disabled" })
    </td>
    <td>
        @Html.HiddenFor(m => m.TestTypeId)
        @Html.HiddenFor(m => m.PointsNumberId)
        @Html.HiddenFor(m => m.PointsNumber)
        <input class="btn btn-primary btn-sm" type="button" onclick="saveThresholdValue(this, '/ThresholdValueSetting/SaveThresholdValue')" operate="save" value="保存" />
    </td>
    <td>
        @Html.HiddenFor(m => m.TestTypeId)
        @Html.HiddenFor(m => m.PointsNumberId)
        @Html.HiddenFor(m => m.PointsNumber)
        <input class="btn btn-primary btn-sm" type="button" onclick="saveThresholdValue(this, '/ThresholdValueSetting/SaveThresholdValue')" operate="remove" value="一键清空" />
    </td>
</tr>

@*<script>
    $(function (){
        var isContainNagetive=@Model.IsContainNegative;
        if(isContainNagetive){
            alert("true")
            $('#NegativeFirst').removeClass("readonly");
            $('#NegativeSecond').removeClass("readonly");
        }
    });
</script>*@

@Html.AntiForgeryToken()



